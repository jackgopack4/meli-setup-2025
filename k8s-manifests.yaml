---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: default
data:
  config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      # Prometheus receiver to scrape metrics from the sample app
      prometheus:
        config:
          scrape_configs:
            - job_name: 'sample-app'
              scrape_interval: 15s
              static_configs:
                - targets: ['localhost:8080']

    processors:
      # Resource detection processor to auto-detect Kubernetes metadata
      resourcedetection:
        detectors: [env, k8snode]
        k8snode:
          node_from_env_var: K8s_NODE_NAME
          resource_attributes:
            k8s.node.uid: 
              enabled: false

      # Resource processor to add additional attributes
      resource:
        attributes:
          - key: deployment.environment
            value: "kubernetes"
            action: upsert
          - key: service.namespace
            value: "default"
            action: upsert
          # - key: datadog.host.use_as_metadata
          #   value: true
          #   action: upsert

      # Batch processor for better performance
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048

      # Memory limiter to prevent OOM (set to 80% of container limit)
      memory_limiter:
        limit_mib: 320  # 80% of 400Mi container limit
        check_interval: 1s

    connectors:
      # Datadog connector for enrichment and metric generation
      datadog/connector:
        
    exporters:
      # Datadog exporter for traces
      datadog:
        api:
          site: datad0g.com
          key: ${DD_API_KEY}
        host_metadata:
          enabled: false
        hostname: ${env:K8s_NODE_NAME}

      # Debug exporter for troubleshooting
      debug:
        verbosity: detailed

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133

    service:
      pipelines:
        # Traces pipeline
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resourcedetection, resource, batch]
          exporters: [datadog, datadog/connector, debug]
        
        # Metrics pipeline
        metrics:
          receivers: [otlp, prometheus, datadog/connector]
          processors: [memory_limiter, resourcedetection, resource, batch]
          exporters: [datadog, debug]
        
        # Logs pipeline
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resourcedetection, resource, batch]
          exporters: [datadog, debug]

      extensions: [health_check]
      
      telemetry:
        logs:
          level: info
        # metrics:
        #   level: basic

# Note: datadog-api-key Secret will be created by deploy.sh script
# This ensures the API key is not hardcoded in version control

---
# ServiceAccount for OpenTelemetry Collector
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: default

---
# ClusterRole with permissions to read nodes for k8snode detector
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding to bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
- kind: ServiceAccount
  name: otel-collector
  namespace: default

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-deployment
  namespace: default
  labels:
    app: sample-app
spec:
  replicas: 3  # Multiple pods for load distribution
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: otel-collector
      containers:
      # Main application container
      - name: sample-app
        image: sample-app:latest
        imagePullPolicy: Never  # For local development
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://localhost:4318"
        - name: OTEL_SERVICE_NAME
          value: "sample-app"
        - name: OTEL_SERVICE_VERSION
          value: "1.0.0"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "deployment.environment=kubernetes,service.namespace=default"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

      # OpenTelemetry Collector sidecar
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:latest
        command:
        - /otelcol-contrib
        - --config=/etc/otel-collector/config.yaml
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 13133
          name: health
        env:
        - name: DD_API_KEY
          valueFrom:
            secretKeyRef:
              name: datadog-api-key
              key: api-key
        - name: K8s_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: otel-collector-config
          mountPath: /etc/otel-collector
          readOnly: true
        resources:
          requests:
            memory: "200Mi"
            cpu: "100m"
          limits:
            memory: "400Mi"
            cpu: "200m"
        # Startup probe for slow-starting collector
        startupProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12  # 60 seconds total startup time
        # Liveness probe with generous settings
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30  # Start checking after startup probe succeeds
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        # Readiness probe to determine when ready to receive traffic
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3

      volumes:
      - name: otel-collector-config
        configMap:
          name: otel-collector-config

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  namespace: default
  labels:
    app: sample-app
spec:
  selector:
    app: sample-app
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
    protocol: TCP
  - name: otlp-http
    port: 4318
    targetPort: 4318
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-loadbalancer
  namespace: default
  labels:
    app: sample-app
spec:
  selector:
    app: sample-app
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer 

---
# ServiceAccount for Datadog Agent
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datadog-agent
  namespace: default

---
# ClusterRole for Datadog Agent with official permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: datadog-agent
rules:
- apiGroups: [""]
  resources:
    - services
    - events
    - endpoints
    - pods
    - nodes
    - componentstatuses
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
    - configmaps
  resourceNames: ["datadogtoken", "datadog-leader-election"]  # Kubernetes event collection state and leader election
  verbs: ["get", "update"]
- apiGroups: [""]
  resources:
    - configmaps
  verbs: ["create"]
- apiGroups: ["quota.openshift.io"]
  resources:
    - clusterresourcequotas
  verbs: ["get", "list"]
- apiGroups: ["autoscaling"]
  resources:
    - horizontalpodautoscalers
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
    - cronjobs
    - jobs
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources:
    - deployments
    - replicasets
    - daemonsets
  verbs: ["get", "list", "watch"]
- apiGroups: ["policy"]
  resources:
    - podsecuritypolicies
  verbs: ["use"]
  resourceNames:
    - datadog-agent
- apiGroups: ["networking.k8s.io"]
  resources:
    - networkpolicies
  verbs: ["get", "list", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources:
    - leases
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["metrics.k8s.io"]
  resources:
    - nodes
    - pods
  verbs: ["get", "list"]
- nonResourceURLs:
    - "/version"
    - "/healthz"
  verbs: ["get"]

---
# ClusterRoleBinding for Datadog Agent
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: datadog-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: datadog-agent
subjects:
- kind: ServiceAccount
  name: datadog-agent
  namespace: default

---
# Datadog Agent DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: datadog-agent
  namespace: default
  labels:
    app: datadog-agent
spec:
  selector:
    matchLabels:
      app: datadog-agent
  template:
    metadata:
      labels:
        app: datadog-agent
      name: datadog-agent
    spec:
      serviceAccountName: datadog-agent
      containers:
      - name: datadog-agent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
        image: gcr.io/datadoghq/agent:7
        ports:
        - containerPort: 8125
          name: dogstatsdport
          protocol: UDP
        - containerPort: 8126
          name: traceport
          protocol: TCP
        env:
        - name: DD_API_KEY
          valueFrom:
            secretKeyRef:
              name: datadog-api-key
              key: api-key
        - name: DD_SITE
          value: "datad0g.com"
        - name: DD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DD_CLUSTER_NAME
          value: "kind-meli-otel-test"
        - name: KUBERNETES
          value: "true"
        - name: DD_KUBERNETES_KUBELET_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_COLLECT_KUBERNETES_EVENTS
          value: "true"
        - name: DD_LEADER_ELECTION
          value: "true"
        - name: DD_KUBERNETES_COLLECT_METADATA_TAGS
          value: "false"
        - name: DD_KUBERNETES_METADATA_TAG_UPDATE_FREQ
          value: "60"
        # APM Configuration
        - name: DD_APM_ENABLED
          value: "true"
        - name: DD_APM_NON_LOCAL_TRAFFIC
          value: "true"
        - name: DD_APM_RECEIVER_PORT
          value: "8126"
        # Logs Configuration
        - name: DD_LOGS_ENABLED
          value: "true"
        - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
          value: "true"
        - name: DD_LOGS_CONFIG_K8S_CONTAINER_USE_FILE
          value: "true"
        - name: DD_CONTAINER_EXCLUDE_LOGS
          value: "name:datadog-agent"
        # DogStatsD Configuration
        - name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
          value: "true"
        - name: DD_DOGSTATSD_PORT
          value: "8125"
        # Process Monitoring
        - name: DD_PROCESS_AGENT_ENABLED
          value: "true"
        - name: DD_PROCESS_AGENT_CONTAINER_SOURCE
          value: "kubelet"
        # Health and Monitoring
        - name: DD_HEALTH_PORT
          value: "5555"
        - name: DD_LOG_LEVEL
          value: "INFO"
        # Container Runtime (kind uses containerd)
        - name: DD_CRI_SOCKET_PATH
          value: /host/var/run/containerd/containerd.sock
        - name: DOCKER_HOST
          value: unix:///host/var/run/containerd/containerd.sock
        # Kubelet Configuration
        - name: DD_KUBELET_TLS_VERIFY
          value: "false"
        - name: DD_KUBERNETES_KUBELET_NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Disable features that require special privileges or cluster agent in kind
        - name: DD_SYSTEM_PROBE_ENABLED
          value: "false"
        - name: DD_SYSTEM_PROBE_NETWORK_ENABLED
          value: "false"
        - name: DD_REMOTE_CONFIGURATION_ENABLED
          value: "false"
        # Disable orchestrator explorer (requires cluster agent)
        - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
          value: "false"
        # Disable compliance monitoring
        - name: DD_COMPLIANCE_CONFIG_ENABLED
          value: "false"
        # Disable Docker check (kind uses containerd)
        - name: DD_ENABLE_CHECK_DOCKER
          value: "false"
        # Configure for kind environment
        - name: DD_FORWARDER_TIMEOUT
          value: "10"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: dockersocketdir
          mountPath: /host/var/run
          mountPropagation: None
          readOnly: true
        - name: procdir
          mountPath: /host/proc
          mountPropagation: None
          readOnly: true
        - name: cgroups
          mountPath: /host/sys/fs/cgroup
          mountPropagation: None
          readOnly: true
        - name: pointerdir
          mountPath: /opt/datadog-agent/run
          mountPropagation: None
        - name: logpodpath
          mountPath: /var/log/pods
          mountPropagation: None
          readOnly: true
        - name: logcontainerpath
          mountPath: /var/lib/docker/containers
          mountPropagation: None
          readOnly: true
        - name: passwd
          mountPath: /etc/passwd
          readOnly: true
        livenessProbe:
          httpGet:
            path: /live
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /ready
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6

      volumes:
      - name: dockersocketdir
        hostPath:
          path: /var/run
      - name: procdir
        hostPath:
          path: /proc
      - name: cgroups
        hostPath:
          path: /sys/fs/cgroup
      - name: pointerdir
        hostPath:
          path: /opt/datadog-agent/run
      - name: logpodpath
        hostPath:
          path: /var/log/pods
      - name: logcontainerpath
        hostPath:
          path: /var/lib/docker/containers
      - name: passwd
        hostPath:
          path: /etc/passwd
      tolerations:
      - operator: Exists
      hostNetwork: true
      hostPID: true
      restartPolicy: Always